<?php


class UserController extends Zend_Controller_Action
{

    public function init()
    {

        $this->view->identity = Zend_Auth::getInstance()->getIdentity();

        $this->_flashMessenger = $this->_helper->getHelper('FlashMessenger');
        $this->view->mensajes = $this->_flashMessenger->getMessages();

    }



    public function registerAction()
    {
        $this->view->page_title = 'Register';

        //if the user is logged already redir to user account
        $auth = Zend_Auth::getInstance();
        if ($auth->hasIdentity()) {
            $this->_redirect('/user/profile');
        }

        $request = $this->getRequest();
        require_once APPLICATION_PATH . '/forms/UserRegister.php';
        $form = new Form_UserRegister();

        if ($this->getRequest()->isPost()) {
            if ($form->isValid($request->getPost())) {
                $formulario = $form->getValues();

                //check 2 passwords matches
                $checkpasswords = ($formulario['password1'] == $formulario['password2']);

                if ($checkpasswords == FALSE) {
                    $this->_helper->_flashMessenger->addMessage(array('error' => 'The passwords entered do not match.'));
                    $form->populate($form->getValues());
                    $this->_redirect('/user/register');
                    return;
                }

                $model = new Model_User();
                //check user email exists on db
                $checkemail = $model->checkEmail($formulario ['email']);
                if ($checkemail !== NULL) {
                    $this->_helper->_flashMessenger->addMessage(array('error' => 'This email is taken. <a href="/user/login">Do you want to login?</a>'));
                    $this->_redirect('/user/register');
                    return;
                }

                if ($checkemail == NULL) {
                    // success: insert the new user on ddbb
                    $data['password'] = hash('sha256', trim($formulario['password1']), FALSE);
                    $data ['email'] = $formulario ['email'];
                    $data ['username'] = $formulario ['username'];
                    $data ['created'] = date('Y-m-d H:i:s');
                    $data ['token'] = md5(uniqid(rand(), 1));
                    $model->save($data);

                    //once token generated by model save, now we need it to send to the user by email
                    $token = $model->getToken($formulario['email']);

                    //now lets send the validation token by email to confirm the user email
                    $env = getenv('APPLICATION_ENV'); //production or dev
                    if ($env == 'dev') {
                        $http = 'http://';
                    } else {
                        $http = 'https://';
                    }
                    $url = $http . $this->getRequest()->getHttpHost();

                    //send validation email to new user
                    $mail = new Zend_Mail ();
                    $mail->setBodyHtml($this->view->translate('Please, click on this url to finish your register process:<br />')
                        . '<a href="' . $url . '/user/validate/t/' . $token . '">' . $url . $this->view->translate('/user/validate/t/') . $token . '</a>' .
                        '<br /><br />---------<br />' . utf8_decode($this->view->translate('The vulnia bot.')));
                    $mail->setFrom('noreply@vulnia.com', 'vulnia');

                    $mail->addTo($formulario['email']);
                    $mail->setSubject($formulario ['username'] . $this->view->translate(', confirm your email'));
                    $mail->send();

                    //send notice email to me
                    $mail = new Zend_Mail ();
                    $mail->setBodyHtml('New user registered at ' . date("d-m-Y H:i:s")  . '<br>' . $formulario['email']);
                    $mail->setFrom('noreply@vulnia.com', 'no reply - vulnia');

                    $mail->addTo('daniel.remeseiro@gmail.com');
                    $mail->setSubject('New vulnia.com user registered!');
                    $mail->send();


                    $this->_helper->_flashMessenger->addMessage(array('success' => 'Check your inbox email to finish the register process. Check your spam folder also!'));
                    $this->_redirect('/user/login');

                }
            }
        }

        $this->view->form = $form;
    }




    public function profileAction()
    {
        $this->view->page_title = 'Your profile';

        $auth = Zend_Auth::getInstance();
        if (!$auth->hasIdentity()) {
            $this->_redirect('/user/login');
        }

        $userId = $auth->getIdentity()->id;

        $model = new Model_User();
        $this->view->user = $model->fetchUser($userId);


        if ($this->view->user == null) {
            $this->_helper->_flashMessenger->addMessage(array('error' => 'This user does not exist'));
            $this->_redirect('/');
        }

    }




    public function forgotAction()
    {
        $this->view->page_title = 'Forgot password';
        //if the user is logged already redir to profile
        $auth = Zend_Auth::getInstance();
        if ($auth->hasIdentity()) {
            $this->_redirect('/user/profile');
        }

        $request = $this->getRequest();
        require_once APPLICATION_PATH . '/forms/UserForgot.php';
        $form = new Form_UserForgot ();

        if ($this->getRequest()->isPost()) {
            if ($form->isValid($request->getPost())) {
                // collect the data from the form
                $f = new Zend_Filter_StripTags ();
                $email = $f->filter($this->_request->getPost('email'));

                $model = new Model_User();
                $mailcheck = $model->checkEmail($email);

                if ($mailcheck == NULL) {
                    // failure: email does not exists on ddbb
                    $this->_helper->flashMessenger->addMessage(array('error' => 'This email is not in our database. Please, try again.'));
                    $this->_redirect('/user/forgot');
                    return;

                } else { // success: the email exists , so lets send a new token to the user by mail
                    $mailcheck = $mailcheck->toArray();

                    //regenerate the token
                    $mailcheck['token'] = md5(uniqid(rand(), 1));
                    // update the user with this token
                    $model->update($mailcheck);

                    //lets send the new token
                    $env = getenv('APPLICATION_ENV'); //production or dev

                    if ($env == 'dev') {
                        $http = 'http://';
                    } else {
                        $http = 'https://';
                    }
                    $url = $http . $this->getRequest()->getHttpHost();
                    $mail = new Zend_Mail ();
                    $mail->setBodyHtml($this->view->translate('Somebody , probably you, wants to reset your vulnia password.
                     Click on this url to restore your vulnia account:') . '<br />'
                        . '<a href="' . $url . '/user/validate/t/' . $mailcheck['token'] . ' "> ' . $url . '/user/validate/t/' . $mailcheck['token'] . '</a>' .
                        '<br /><br />' .
                        $this->view->translate('Otherwise, ignore this message.') .
                        '<br />__<br />' . utf8_decode($this->view->translate('The vulnia bot.')));

                    $mail->setFrom('noreply@vulnia', 'no reply - vulnia');

                    $mail->addTo($mailcheck ['email']);
                    $mail->setSubject(utf8_decode($this->view->translate('Reset your vulnia password')));
                    $mail->send();

                    $this->_helper->_flashMessenger->addMessage(array('success' => 'Check your inbox email to reset your vulnia password.Check your spam folder also!'));
                    $this->_redirect('/user/login');
                }
            }
        }
        $this->view->form = $form;
    }


    public function validateAction()
    {
        //https://www.hubship.net/user/validate/t/1232452345234
        $this->_helper->viewRenderer->setNoRender(true);
        $token = $this->_request->getParam('t'); //the token

        if (!is_null($token)) {
            //lets check this token against ddbb
            $model = new Model_User();
            $validatetoken = $model->validateToken($token);

            if ($validatetoken !== NULL) {
                $validatetoken = $validatetoken->toArray();
                //first kill previous session or data from client
                //kill the user logged in (if exists)
                Zend_Auth::getInstance()->clearIdentity();
                $this->session->logged_in = false;
                $this->session->email = false;

                $data ['active'] = '1';
                $data ['id'] = $validatetoken ['id'];

                //reset the token
                $data['token'] = NULL;
                //update token user in ddbb
                $model->update($data);


                //update the auth data stored
                $data = $model->fetchUser($validatetoken['id']);
                $auth = Zend_Auth::getInstance();
                $auth->getStorage()->write((object)$data);

                $this->_helper->_flashMessenger->addMessage(array('success' => 'Welcome' . ' ' . $data['email']));
                $this->_redirect('/user/profile');
            } else {
                $this->_helper->_flashMessenger->addMessage(array('error' => 'Sorry, url no valid or expired.'));
                $this->_redirect('/user/forgot');
                return;
            }
        } else {
            $this->_helper->_flashMessenger->addMessage(array('error' => 'Sorry, url no valid or expired.'));
            $this->_redirect('/user/forgot');
            return;
        }
    }


    public function editAction()
    {
        $auth = Zend_Auth::getInstance();

        if (!$auth->getIdentity()->id) {
            $this->_helper->_flashMessenger->addMessage(array('error' => 'Session expired or you are not allowed to view this page'));
            $this->_redirect('/user/login');
            return;
        }

        $modelCarrier = new Model_Carrier();
        $this->view->carriers = $modelCarrier->fetchCarriers();


        $model = new Model_User();
        $id = $auth->getIdentity()->id;
        $user = $model->fetchUser($id)->id;

        if (($auth->getIdentity()->id == $user)) { //if is the user profile owner lets edit
            require_once APPLICATION_PATH . '/views/forms/UserEdit.php';
            $form = new Form_UserEdit ();
            $form->submit->setLabel('Save profile');
            $this->view->form = $form;


            if ($this->getRequest()->isPost()) {
                $formData = $this->getRequest()->getPost();
                if ($form->isValid($formData)) {

                    $data['id'] = $id;
                    $data['firstName'] = $form->getValue('firstName');
                    $data['lastName'] = $form->getValue('lastName');

                    if ($form->getValue('password')) {
                        $data['password'] = hash('sha256', trim($form->getValue('password')), FALSE);
                    }

                    $model->update($data);
                    //update the auth data stored
                    $auth = Zend_Auth::getInstance();
                    $auth->getStorage()->write((object)$data);


                    $this->_helper->_flashMessenger->addMessage(array('success' => 'Your profile was edited succesfully!'));
                    $this->_redirect('/user/profile');
                    return;
                } else {

                    $form->populate($formData);
                }
            } else {
                //$id = $this->_getParam('id', 0);
                if ($id > 0) {
                    $user = new Model_User();
                    $dataUser = $user->fetchUser($id)->toArray();

                    unset($dataUser['password']);
                    $form->populate($dataUser);
                }
            }
        } else {
            $this->_helper->_flashMessenger->addMessage(array('error' => 'Session expired or you are not allowed to view this page'));
            $this->_redirect('/user/login');
            return;
        }
    }




    public function loginAction()
    {
        $this->view->page_title .= 'Login';

        //if the user is logged already redir to home
        $auth = Zend_Auth::getInstance();
        if ($auth->hasIdentity()) {
            $this->_redirect('/user/profile');
        }

        $request = $this->getRequest();
        require_once APPLICATION_PATH . '/forms/UserLogin.php';
        $form = new Form_UserLogin ();

        if ($this->getRequest()->isPost()) {
            if ($form->isValid($request->getPost())) {

                $f = new Zend_Filter_StripTags ();
                $email = $f->filter($this->_request->getPost('email'));
                $password = $f->filter($this->_request->getPost('password'));

                //DDBB validation
                // setup Zend_Auth adapter for a database table
                $env = getenv('APPLICATION_ENV'); //production or dev

                $readConf = new Zend_Config_Ini(APPLICATION_PATH . '/conf/application.ini', $env);
                $dbAdapter = Zend_Db::factory($readConf->resources->db);

                //var_dump($dbAdapter->getConfig());
                //die;

                $authAdapter = new Zend_Auth_Adapter_DbTable($dbAdapter);
                $authAdapter->setTableName('users');
                $authAdapter->setIdentityColumn('email');
                $authAdapter->setCredentialColumn('password');
                // Set the input credential values to authenticate against
                $authAdapter->setIdentity($email);
                $password = hash('sha256', trim($password), FALSE);
                $authAdapter->setCredential($password);


                // do the authentication
                $auth = Zend_Auth::getInstance();
                //check first if the user is activated (by confirmed email)
                $select = $authAdapter->getDbSelect();
                $select->where('active > 0');
                //check if the user is not locked (spammers, bad users, etc)
                $select->where('locked = 0');
                $result = $authAdapter->authenticate();


                if ($result->isValid()) {
                    // success: store database row to auth's storage
                    // system. (Not the password though!)
                    $data = $authAdapter->getResultRowObject(null, 'password');
                    $auth->getStorage()->write($data);

                    $this->_helper->_flashMessenger->addMessage(array('success' => 'Welcome,' . ' ' . $auth->getIdentity()->firstName));

                    Zend_Session::start();
                    //check if user wants to be remembered for 7 days
                    $seconds = 60 * 60 * 24 * 7;

                    if ($this->_request->getPost('rememberme') == "1") {
                        Zend_Session::RememberMe($seconds);
                    } else {
                        Zend_Session::ForgetMe();
                    }


                    //check the redir value if setted
                    $aNamespace = new Zend_Session_Namespace('vulnia');
                    $redir = $aNamespace->redir;

                    if ($redir !== null) {
                        $aNamespace->redir = null; //reset redir value
                        $this->_redirect($redir);
                    } else {
                        //if redir empty goto main home  and set the welcome logged in message
                        $this->_redirect('/user/profile');
                    }
                } else {
                    // failure: wrong username
                    $this->_helper->_flashMessenger->addMessage(array('error' => "Wrong email or password, please try again. <a href='/user/forgot'>Forgot your password?
                    </a>"));
                    $this->_redirect('/user/login');
                }
            }
        }
        // assign the form to the view
        $this->view->form = $form;
    }



    public function logoutAction()
    {
        Zend_Auth::getInstance()->clearIdentity();
        $this->session->logged_in = false;
        $this->session->username = false;

        session_destroy();

        $this->_helper->_flashMessenger->addMessage(array('success' => 'You are now logged out. Good bye!'));
        $this->_redirect('/');
    }

}
